#!/usr/bin/env bash
#
# SPDX-License-Identifier: AGPL-3.0-or-later

_bin="$( \
  dirname \
    "$( \
      command \
        -v \
	  "env")")"
_lib="${_bin}/../lib"
source \
  "${_lib}/libcrash-bash/crash-bash"

# shellcheck disable=SC2034
_global_variables() {
  out_files=()
  img_tuple=""
  input_directory=""
  color=""
  quiet=""
}

_requirements() {
  _check_cmd \
    "cryptsetup"
  _check_cmd \
    "mdadm"
  _check_cmd \
    "mke2fs"
}

_get_conf_path() {
  local \
    _dir \
    _conf
  _dir="${HOME}/.config/$( \
    _get \
      "app" \
      "name")"
  _conf="${_dir}/$( \
    _get \
      "img" \
      "tuple").cfg"
  echo \
    "${_conf}"
}

_set_overrides() {
  _set_override \
    "img" \
    "tuple" \
    "raid0+luks+btrfs"
  if [[ -v override_quiet ]]; then
    quiet="${override_quiet}"
  elif [[ -z "${quiet}" ]]; then
    quiet="y"
  fi
  if [[ -v override_color ]]; then
    color="${override_color}"
  elif [[ -z "${color}" ]]; then
    color="n"
  fi
}

# Show help usage, with an exit status.
# $1: exit status number.
_usage() {
  local \
    _usage_text
  IFS='' \
    read \
      -r \
      -d '' \
      _usage_text << \
        ENDUSAGETEXT || true
Returns an host address for given network on a given network device
usage:
  $(_get "app" "name")
    [options]
    [<out_file>]
  options:
     -f <img_tuple>       Image format tuple, written as
                          '<container>+...+<container>+<fs>'
                          Default: $(_get "img" "tuple")
     -d <directory>       Specify input directory

     -h                   This message.
     -c                   Enable color output
     -v                   Enable verbose output
  file systems:
     ext4                 Ext4 file system
     erofs                Enhanced read only file system
     btrfs                Better file system
     squashfs             Squash file system
  containers:
     squashfs             Squash can act also as a container
     luks                 LUKS2 (encrypted) filesystem container
     raid0                RAID0 filesystem container
ENDUSAGETEXT
  _printf \
    '%s\n' \
    "${_usage_text}"
  exit \
    "${1}"
}

_display_flags() {
  local \
    _flags=(
      "${1}"
    ) \
    _flag
  for _flag \
    in "${_flags[@]}"; do
  _msg_info \
    "                             ${_flag}"
  done
}

# Shows configuration options.
_show_config() {
  local \
    _creation_date
  TZ=UTC \
    printf \
      -v _creation_date \
      '%(%FT%R%z)T' \
      "${SOURCE_DATE_EPOCH}"
  _msg_info "$(_get "app" "name") configuration"
  _msg_info "            Creation date:   $(_get "_creation" "date")"
  _msg_info "           Output file(s):   ${out_files[*]}"
  _msg_info "       Image format tuple:   $(_get "img" "tuple")"
  _msg_info "          Input directory:   $(_get "input" "directory")"
}

_globals
_global_variables
_requirements
_config_user_init \
  "$(_get \
       "app" \
       "name")"
# shellcheck disable=SC2034
while \
  getopts \
    'f:d:cvh?' \
    arg; do
  case \
    "${arg}" in
    f) override_img_tuple="${OPTARG}" ;;
    d) override_input_directory="${OPTARG}" ;;
    c) override_color="y" ;;
    v) override_quiet="n" ;;
    h|?) _set_overrides && \
         _usage \
           0 ;;
    *)
    _msg_error \
      "Invalid argument '${arg}'" \
      0
    _usage \
      1
    ;;
  esac
done
shift \
  $(( \
    OPTIND - 1 \
  ))
(( $# < 1 )) && \
  _msg_error \
    "no output image(s) specified" \
    0 && \
  _set_overrides && \
  _usage \
    1
out_files=(
  "$@"
)
_set_overrides
[[ "$(_get \
        "img" \
        "tuple")" == "" ]] && \
  _msg_error \
    "-f option is required" \
    0 && \
  _usage \
    1
_show_config
_mkimg \
  "$( \
    _get \
      "img" \
      "tuple")" \
  "${out_files[@]}"

# vim:set sw=2 sts=-1 et:
