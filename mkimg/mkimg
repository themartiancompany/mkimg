#!/usr/bin/env bash
#
# SPDX-License-Identifier: AGPL-3.0-or-later

_bin="$( \
  dirname \
    "$( \
      command \
        -v \
	  "env")")"
_lib="${_bin}/../lib"
source \
  "${_lib}/libcrash-bash/crash-bash"

# shellcheck disable=SC2034
_global_variables() {
  mkimg_opts=()
  creation_date=""
  out_files=()
  img_tuple=""
  input_directory=""
  img_size=""
  img_name=""
  img_label=""
  img_epoch=""
  img_writable=""
  img_compression=""
  img_uuid=""
  uuid_type=""
  size_auto=""
  key_type=""
  encryption_key=""
  grub_support=""
  validate_only=""
  color=""
  quiet=""
}

_requirements() {
#   _check_cmd \
#     "cryptsetup"
#  _check_cmd \
#    "mdadm"
  _check_cmd \
    "mke2fs"
}

########################################################
# File system making functions
########################################################

## Utility functions

# Returns epoch given a file system image name 
# $1: value in fs_images
_get_epoch() {
  local \
    _name="${1}"
  echo \
    $(( \
      SOURCE_DATE_EPOCH ))
}

# Returns an unique uuid
# given a datetime in UNIX time
# $1: UNIX time
_get_epoch_fsuuid() {
  local \
    _epoch="${1}" \
    _uuidgen_opts=()
  if [[ "${_epoch}" == "" ]]; then
    _epoch="${SOURCE_DATE_EPOCH}"
  fi
  _uuidgen_opts=(
    --sha1
    --namespace
      "${epoch_namespace}"
    --name
      "${_epoch}"
  )
  uuidgen \
    "${_uuidgen_opts[@]}"
}

# Gets an ext4-compatible uuid from a date
# $1: datetime in UNIX time
_epoch_to_uuid() {
  local \
    _epoch="${1}" \
    _uuid
  if [[ "${_epoch}" == "" ]]; then
    _epoch="${SOURCE_DATE_EPOCH}"
  fi
  TZ=UTC \
  printf \
    -v \
      _uuid \
    '%(%F-%H-%M-%S-00)T' \
    "${_epoch}"
  echo \
    "${_uuid}"
}

_get_size() {
  local \
    _dir="${1}"
  echo \
    $(du \
        -s \
        "${_dir}" | \
        cut \
          -f \
            1)
}

## BTRFS (GNU)

# Creates an EROFS image given a directory.
# $1: resulting image
# $2: input directory
# $3: UNIX time (to generate a date-based uuid)
_run_mkbtrfs() {
  local \
    _image_path="${1}"
    _size="${2}" \
    _dir="${3}" \
    _epoch="${4}" \
    _label="${5}" \
    fsuuid
  fsuuid="$( \
    _get_epoch_fsuuid \
      "${_epoch}")"
  [[ "${_size}" == "" ]] && \
    echo \
      "autosize"
  [[ ! "${quiet}" == "y" ]] || \
    mkfs_btrfs_options+=(
      '--quiet'
    )
  mkfs_btrfs_options+=(
    '-L' "${_label}"
    '-U' "${fsuuid}"
    "${_mkfs_options[@]}")
  mkfs.erofs "${mkfs_erofs_options[@]}" -- \
             "${_image_path}" \
             "${_dir}"
  _msg_info "Done!"
}

## EROFS

# Creates an EROFS image given a directory.
# $1: resulting image
# $2: input directory
# $3: UNIX time (to generate a date-based uuid)
_run_mkerofs() {
    local \
      _image_path="${1}" \
      _dir="${2}" \
      _epoch="${3}" \
      fsuuid
    fsuuid="$( \
      _get_epoch_fsuuid "${_epoch}")"
    if [[ "${quiet}" == "y" ]]; then 
      mkfs_erofs_options+=(
        '--quiet')
    fi
    mkfs_erofs_options+=(
      '-U'
        "${fsuuid}"
      "${_mkfs_options[@]}"
    )
    mkfs.erofs \
      "${mkfs_erofs_options[@]}" -- \
      "${_image_path}" \
      "${_dir}"
}

## EXT4

# Creates an ext4 image of given size 
# from a directory with the same name in the same path.
# $1: directory to put into the image
# $2: size of the resulting image
# $3: UNIX time (to generate a date-based uuid)
# $4: partition label
# $5: if true the file system image will be writable
_run_mkext4() {
  local \
    _dir="${1}" \
    _image_path="${1}.img" \
    _size="${2}" \
    _epoch="${3}" \
    _label="${4}" \
    _writable="${5}" \
    _fsuuid \
    _ext4_hash_seed \
    _mkfs_ext4_opts=() \
    _tune2fs_opts=() \
    _ext_opts=()
  _fsuuid="$( \
    _epoch_to_uuid \
      "${_epoch}")"
  _uuidgen_opts=(
    --sha1
    --namespace
      "${epoch_namespace}"
    --name
      "${_epoch}"
    "ext4"
    "hash"
    "seed"  
  )
  _ext4_hash_seed="$( \
    uuidgen \
      "${_epoch_opts[@]}")"
  _ext_opts=(
    "lazy_itable_init=0"
    "root_owner=0:0"
    "hash_seed=${ext4_hash_seed}")
  _mkfs_ext4_opts=(
    -d
      "${_dir}"
    -O
      '^has_journal,^resize_inode'
    -E
      "$(IFS=, ; \
         echo \
           ${_ext_opts[*]})"
    -m
      0
    -F
    -b
      4096
    -U
      'clear'
    )
  if [[ "${_label}" != "" ]]; then
    _mkfs_ext4_options+=(
      -L
        "${_label}")
  fi
  if [[  "${quiet}" == "y" ]]; then
    _mkfs_ext4_options+=(
      -q
    )
  fi
  if [[ "${quiet}" == "n" ]]; then
    E2FSPROGS_FAKE_TIME="${_epoch}" \
    mkfs.ext4 \
      "${_mkfs_ext4_options[@]}" -- \
      "${_image_path}" \
      "${_size}K"
  elif [[ "${quiet}" == "n" ]]; then
    E2FSPROGS_FAKE_TIME="${_epoch}" \
    mkfs.ext4 \
      "${mkfs_ext4_options[@]}" -- \
      "${_image_path}" \
      "${_size}K" > /dev/null 2>&1
  fi
  _tune2fs_opts+=(
    -c
      0
    -i
      0 
  )
  if [ "${_writable}" != "true" ]; then
    _tune2fs_opts+=(
      -O \
        read-only
    )
  fi
  tune2fs \
    "${_tune2fs_opts[@]}" -- \
    "${_image_path}" > /dev/null
}

## FAT

# Creates a FAT image 
# $1: image path
# $2: image size in bytes
# $3: image label
_run_mkfat() {
  local \
    _image_path="${1}" \
    _size_bytes=${2} \
    _label="${3}" \
    _deps=() \
    _mkfs_fat_options=() \
    _fun \
    _size_kib="0" \
    _msg=()
  _deps=(
    'function ceil(x){return int(x)+(x>int(x))}'
    'function byte_to_kib(x){return x/1024}'
    'function mib_to_kib(x){return x*1024}'
  )
  _fun='mib_to_kib(ceil((byte_to_kib($1)+1024)/1024))'
  if (( _size_bytes < 2*1024*1024 )); then
    _msg=(
      "Image size is ${_size_bytes} bytes,"
      "less than 2 MiB! Bumping up to 2 MiB")
    _msg_info \
      "${_msg[*]}"
    _size_bytes=$(( \
      20*1024*1024))
  fi
  # Where it spills?
  _size_bytes=$(( \
    _size_bytes * 10))
  # Convert from bytes to KiB and round up to the next full MiB
  # with an additional MiB for reserved sectors.
  _size_kib="$( \
    awk \
      "${_deps[*]} END {print ${_fun}}" <<< \
      "${_size_bytes}")"
  # The FAT image must be created with mkfs.fat, not mformat,
  # as some systems have issues with mformat made images:
  # https://lists.gnu.org/archive/html/grub-devel/2019-04/msg00099.html
  _mkfs_fat_options=(
    -C
    -n
      "${_label}"
  )
  _msg_info \
    "Creating FAT image of size: ${_size_kib} KiB..."
  if [[ "${quiet}" == "y" ]]; then
    # mkfs.fat does not have a -q/--quiet option, so
    # redirect stdout to /dev/null instead
    # https://github.com/dosfstools/dosfstools/issues/103
    mkfs.fat \
      "${_mkfs_fat_options[@]}" \
      "${_image_path}" \
      "${_size_kib}" > \
      /dev/null
  else
    mkfs.fat \
      "${_mkfs_fat_options[@]}" \
      "${_image_path}" \
      "${_size_kib}"
  fi
}

## LUKS

# Determines correct fallocate options for an image at a chosen path
# $1: path of the fallocate resulting image to verify options for
_validate_fallocate_opts() {
  local \
    _image_path="${1}" \
    _posix_error=() \
    _msg
  _posix_error=(
    "fallocate:"
    "fallocate failed:"
    "Operation not supported"
  )
  _msg="$( \
    fallocate \
      -l \
        "100K" \
      "${_image_path}.test" 2>&1)" 
  if [ "${_msg}" == "${_posix_error[*]}" ]; then
    rm \
      "${_image_path}.test"
    echo \
      '--posix' 
  elif [ "${_msg}" != "" ]; then
    _msg_error \
      "${_msg}" \
      1
  fi
}

# Closes a LUKS device mapper
# $1: device mapper to close
_close_luks_device() {
  local \
    _device="${1}" \
    _mapper
  _mapper=$( \
    basename \
      "${_device}")
  blockdev \
    --flushbufs \
    "${_device}" > \
    /dev/null 2>&1 || \
      true
  cryptsetup \
    luksClose \
    "${_mapper}" > \
    /dev/null 2>&1 || \
    true
  if [ -e "${_device}" ]; then
    dmsetup \
      remove \
      "${_device}" > \
      /dev/null 2>&1 || \
      true
  fi
  sync
}

# Creates and opens a LUKS image of the size
# of the pacstrap directory plus 200MB.
# $1: image to write on
# $2: partition size
# $3: encryption key
# $4: UNIX time (to generate a date-based uuid)
# $5: partition label
# $6: if true, the partition will be writable
# $7: if true, dm-verity layer will be disabled
#     to be able to be opened by GRUB
_run_mkluks() {
  local \
    _image_path="${1}" \
    _size="${2}" \
    _encryption_key="${3}" \
    _uuid="${4}" \
    _label="${5}" \
    _writable="${6}" \
    _grub="${7}" \
    _mkluks_opts=() \
    _fallocate_opts=() \
    _cryptsetup_opts=() \
    _activation_opts=() \
    _fsuuid
  _cryptsetup_opts=(
    --type
      'luks2'
    --timeout=69042
  )
  _mapper=$( \
    basename \
      "${_image_path}")".map"
  if [[ "${_uuid}" != "" ]]; then
    _mkluks_opts+=(
      -u
        "${_uuid}"
    )
  fi
  if [[ "${_encryption_key}" != "" ]]; then
    _mkluks_opts+=(
      -k 
        "${_encryption_key}"
    )
    _key_opts+=(
      "--key-file=${_encryption_key}"
    )
    _cryptsetup_opts+=(
      "${_key_opts[@]}")
  fi
  if [[ "${_label}" != "" ]]; then
    _mkluks_opts+=(
      -l
        "${_label}"
    )
  fi
  # # Remove as soon as gcrypt adds support for argon2i
  # # and GRUB for the dm-integrity layer
  if [ "${_grub}" == "true" ]; then
    _mkluks_opts+=(
      -g
    )
  fi
  _activation_opts+=(
    "${_cryptsetup_opts[@]}"
  )
  if [ "${_writable}" != "true" ]; then
    _mkluks_opts+=(
      -r
    )
    _activation_opts+=(
      '--persistent'
      '--integrity-no-journal'
      # '--key-size' "${_key_size}"
    )
  fi
  _fallocate_opts+=(
    '--length'
    "${_size}K"
    "$(_validate_fallocate_opts \
         "${_image_path}")"
  )
  fallocate \
    "${_fallocate_opts[@]}" \
    "${_image_path}"
  mkluks \
    "${_mkluks_opts[@]}"
    "${_image_path}"
}


## RAID

# Creates and opens a RAID device
# $1: RAID name
# $2: RAID type (only '1' for now)
_run_mkraid() {
  # local \
  #   _image_path="${1}" \
  #   _dev_path="${2}"
  local \
    _name="${1}" \
    _type="${2}"  \
    _size="${3}" \
    _devices=()
  shift \
    3
  _devices=(
    "$@"
  )
  mdadm 
    --create \
      "/dev/md${_name}.map" \
    --level="${_type}" \
    --run \
      "${_devices[@]}"
}

## SQUASHFS

# Creates a squashfs image from a
# file system image or directory.
# $1: directory or a file system image
# $2: path of the result image
_run_mksquashfs() {
  local \
    _directory_or_fs="${1}" \
    _image_path="${2}" \
    _msg=() \
    _mksquashfs_options=()
  _mksquashfs_options=(
    "${_mkfs_options[@]}"
  )
  if [[ "${quiet}" == "y" ]]; then
    _mksquashfs_options+=(
      '-no-progress'
      '-quiet')
  fi
  mksquashfs \
    "${_directory_or_fs}" \
    "${_image_path}" \
    -noappend \
    "${_mksquashfs_options[@]}"
}


## SWAP

# Creates a swap image
# $1: resulting image
# $2: image size
# $3: UNIX time (to generate a date-based uuid)
# $4: partition label
_run_mkswap() {
  local \
    _image_path="${1}" \
    _size="${2}" \
    _epoch="${3}" \
    _label="${4}" \
    _fsuuid
  _fsuuid="$( \
    _get_epoch_fsuuid \
      "${_epoch}")"
  dd \
    if=/dev/zero \
    of="${_image_path}" \
    bs=1K \
    count="${_size}" \
    status=progress
  chmod \
    0600 \
    "${_image_path}"
  sync
  mkswap \
    -L \
      "${_label}" \
    -U \
      "${_fsuuid}" \
    "${_image_path}"
}

#################################################
# Image making functions
#################################################

### Utility functions

# Returns internal size for an internal partition 
# from the outer image size
# $1: outer partition size
_get_internal_size() {
  local \
    _size="${1}" \
    _ratio \
    _s=50 \
    _S=200 \
    _l=1000 \
    _L=5000
  if [[ "${_size}" -lt $((_s * 1000)) ]]; then
    _ratio=60
  elif [[ "${_size}" -gt $((_s * 1000)) ]] && \
     [[ "${_size}" -lt $((_S * 1000)) ]]; then
    _ratio=70
  elif [[ "${_size}" -gt $((_S * 1000)) ]] && \
     [[ "${_size}" -lt $((_l * 1000)) ]]; then
    _ratio=75
  elif [[ "${_size}" -gt $((_l * 1000)) ]] && \
     [[ "${_size}" -lt $((_L * 1000)) ]]; then
    _ratio=80
  else
    _ratio=85
  fi
  echo \
    $(( \
      (_size * _ratio) / 100 ))
}

### Base types

## BTRFS (file system with many features)

# Creates a btrfs file system image
# $1: directory to use to generate the image
# $2: image path
# $3: image size
# $4: UNIX time (for a date-based uuid)
# $5: partition label
_mkimg_btrfs() {
  local \
    _dir="${1}" \
    _image_path="${2}" \
    _size="${3}" \
    _epoch="${4}" \
    _label="${5}" \
    _writable="${6}" \
    _compression="${7}"
  # mmm
  if [[ "${_size}" == "" ]]; then
    _msg_info \
      "Pre-running btrfs to determine LUKS partition size"
    _run_mkbtrfs \
      "${_tmp_img}" \
      "${_dir}" \
      "${_epoch}"
    _tmp_size=$( \
       _get_size \
         "${_tmp_img}")
    _size=$(( \
      ( 69420 + _tmp_size * 12 ) / 10  ))
  fi
  _run_mkbtrfs \
    "${_dir}" \
    "$(_get_internal_size \
         "${_size}")" \
    "${_epoch}" \
    "${_label}" \
    "${_writable}"
  sync
}


## EROFS (compressed read-only image type)

# Create an EROFS image containing the root file system and saves it on the ISO 9660 file system.
# $1: image path
# $2: directory to be put onto the image
# $3: UNIX time (for a date-based uuid)
_mkimg_erofs() {
  local \
    _image_path="${1}" \
    _dir="${2}" \
    _epoch="${3}"
  _run_mkerofs \
    "${_image_path}" \
    "${_dir}" \
    "${_epoch}"
}

## EXT4 (easily readable file system)

# Creates an ext4 file system image
# $1: directory to use to generate the image
# $2: image path
# $3: image size
# $4: UNIX time (for a date-based uuid)
# $5: partition label
_mkimg_ext4() {
  local \
    _dir="${1}" \
   _image_path="${2}" \
   _size="${3}" \
   _epoch="${4}" \
   _label="${5}" \
   _writable="true"
  _run_mkext4 \
    "${_dir}" \
    "$(_get_internal_size \
         "${_size}")" \
    "${_epoch}" \
    "${_label}" \
    "${_writable}"
  mv \
    "${_dir}.img" \
    "${_image_path}"
  sync
}

## FAT

# Creates a fat image.
# $1: image path
# $2: image size in bytes
# $3: image label
_mkimg_fat() {
  _run_mkfat \
    "$@"
}

## LUKS (encrypted file system container)

# Steps shared by the mkimg+<fs_image_type>+luks functions
# $1: name for the device mapper
# $2: an encryption key (prompts for one if empty)
# $3: partition label
_mkluks_common() {
  local \
    _name="${1}" \
    _key="${2}" \
    _label="${3}" \
    _out \
    _out_dir
  _out_dir="$( \
    dirname \
      "${out_files}")"
  _out="${_out_dir}/${_label}.key"
  if [ "${_key}" = "" ]; then
    ucantellme \
      "${_out}"
    _encryption_key="${_out}"
  elif [ "${_key}" = "auto" ]; then
    key-gen \
      "${_out}"
    _encryption_key="${_out}"
  fi
}

## SQUASHFS (compressed read-only image type)

# Creates a squash fs image.
# $1: directory to create the squashfs image with
# $2: resulting image path
_mkimg_squashfs() {
  local \
    _dir="${1}" \
    _image_path="${2}"
  _run_mksquashfs \
    "${_dir}" \
    "${_image_path}"
}

## SWAP (on-disk virtual memory)

# Creates a swap image.
# $1: path of the resulting image
# $2: partition size
# $3: UNIX time (for a date-based uuid)
# $4: partition label
_mkimg_swap() {
  _run_mkswap \
    "$@"
}

### 2-layered types

## EROFS over LUKS (encrypted compressed
#                   read-only image type)

# Create an EROFS image containing the root file system and saves it on the LUKS image.
# Save the LUKS image on the ISO 9660 file system.
# $1: device mapper name
# $2: directory to put inside the image
# $3: image path
# $4: image size
# $5: encryption key
# $6: UNIX time (for a datetime-based uuid)
# $7: partition label
# $8: if true, the dm-verity layer will be disabled so that the image can be opened from GRUB
_mkimg_erofs+luks() {
  local \
    _name="${1}" \
    _dir="${2}" \
    _image_path="${3}" \
    _size="${4}" \
    _encryption_key="${5}" \
    _epoch="${6}" \
    _label="${7}" \
    _grub="${8}" \
    _writable="false" \
    _tmp_img="" \
    _tmp_size
  _tmp_img="$( \
    _get \
      "work" \
      "dir")/tmp.erofs"
  if [[ "${_size}" == "" ]]; then
    _msg_info \
      "Pre-running mkerofs to determine LUKS partition size"
    _run_mkerofs \
      "${_tmp_img}" \
      "${_dir}" \
      "${_epoch}"
    _tmp_size=$(_get_size "${_tmp_img}")
    _size=$(( \
      69420 + \
      _tmp_size * 12 / 10))
  fi
  _mkluks_common \
    "${_name}" \
    "${_encryption_key}" \
    "${_label}"
  _run_mkluks \
    "${_image_path}" \
    "${_size}" \
    "${_encryption_key}" \
    "${_epoch}" \
    "${_label}" \
    "${_writable}" \
    "${_grub}"
  if [[ "${_tmp_size}" != "" ]]; then
    _msg_info \
      "Copying erofs image"
    if [[ "${quiet}" == "y" ]]; then
      dd \
        if="${_tmp_img}" \
        of="${image_device}" > \
        /dev/null 2>&1
    else
      dd \
        if="${_tmp_img}" \
        of="${image_device}"
    fi
  else
    msg_info \
      "Writing erofs image"
    _run_mkerofs \
      "${image_device}" \
      "${_dir}" \
      "${_epoch}"
  fi 
  sync
  _close_luks_device \
    "${image_device}"
}

## EXT4 over LUKS (encrypted image type)

# Creates an ext4 fs inside a LUKS container image file.
# $1: device mapper name
# $2: directory to be put onto the image
# $3: image path
# $4: image size
# $5: encryption key
# $6: UNIX time (for a date-based uuid)
# $7: partion label
# $8: if true, the dm-verity will be disabled to let GRUB open it
_mkimg_ext4+luks() {
  local \
    _name="${1}" \
    _image_path="${2}" \
    _size="${3}" \
    _epoch="${4}" \
    _label="${5}" \
    _grub="${6}" \
    _writable="${7}" \
    _dir \
    _encryption_key
  if (( $# >= 8 )); then
    _dir="${8}"
  fi
  if (( $# >= 8 )); then
    _encryption_key="${9}"
  fi
  # _mkluks_common \
  #   "${_name}" \
  #   "${_encryption_key}" \
  #   "${_label}"
  # _run_mkluks \
  #   "${_image_path}" \
  #   "${_size}" \
  #   "${_encryption_key}" \
  #   "${_epoch}" \
  #   "${_label}" \
  #   "${_writable}" \
  #   "${_grub}"
  # _run_mkext4 \
  #   "${_dir}" \
  #   "$(_get_internal_size \
  #        "${_size}")" \
  #   "${_epoch}" \
  #   "${_name}" \
  #   "${_writable}"
  # dd \
  #   if="${_dir}.img" \
  #   of="${image_device}" > \
  #   /dev/null 2>&1
  # sync
  # _close_luks_device \
  #   "${image_device}"
  # _msg_info \
  #   "Done!"
  # rm -- \
  #   "${_dir}.img"
}

## EXT4 over RAID (high-availability/high-performance
#                  image type)

# Creates or expand an ext4-formatted RAID array
# $1: RAID name
# $2: files to be put onto the RAID
# $@: devices, in the following format <todo>
_mkimg_ext4+raid1() {
  local \
    _name="${1}" \
    _dir="${2}" \
    _array=()
  shift \
    2
  _array+=(
    "$@"
  )
  _run_mkraid \
    "${_name}"
  echo \
    "${_array[@]}"
}

## EXT4 over SQUASHFS (easily supported file system over
##                     read-only compressed container)

# Creates an ext4 file system inside a squashfs image.
# $1: partition label
# $2: directory to put inside the image
# $3: image path
# $4: image size
# $5: UNIX time (for a datetime-based uuid)
_mkimg_ext4+squashfs() {
  local \
    _label="${1}" \
    _dir="${2}" \
    _image_path="${3}" \
    _size="${4}" \
    _epoch="${5}" \
    _writable="false"
  _run_mkext4 \
    "${_dir}" \
    "$(_get_internal_size \
         "${_size}")" \
    "${_epoch}" \
    "${_name}" \
    "${_writable}"
  _run_mksquashfs \
    "${_dir}.img" \
    "${_image_path}"
  rm -- \
    "${_dir}.img"
}

## BTRFS over LUKS (encrypted image type)

# Creates a btrfs file system inside a LUKS container image file.
# $1: device mapper name
# $2: directory to be put onto the image
# $3: image path
# $4: image size
# $5: encryption key
# $6: UNIX time (for a date-based uuid)
# $7: partion label
# $8: if true, the dm-verity will be disabled to let GRUB open it
_mkimg_btrfs+luks() {
  local \
    _name="${1}" \
    _dir="${2}" \
    _image_path="${3}" \
    _size="${4}" \
    _encryption_key="${5}" \
    _epoch="${6}" \
    _label="${7}" \
    _grub="${8}" \
    _writable="${9}" \
    _compression="${10}"
  _mkluks_common \
    "${_name}" \
    "${_encryption_key}" \
    "${_label}"
  _run_mkluks \
    "${_image_path}" \
    "${_size}" \
    "${_encryption_key}" \
    "${_epoch}" \
    "${_label}" \
    "${_writable}" \
    "${_grub}"
  _run_btrfs \
    "${_dir}" \
    "$(_get_internal_size \
      "${_size}")" \
    "${_epoch}" \
    "${_name}" \
    "${_writable}" \
    "${_compression}"
  dd \
    if="${_dir}.img" \
    of="${image_device}" > \
    /dev/null 2>&1
  sync
  _close_luks_device \
    "${image_device}"
  _msg_info \
    "Done!"
  rm -- \
    "${_dir}.img"
}


# SQUASHFS over LUKS (encrypted compressed
#                     read-only image type)

# Creates a squashfs image and saves it on a LUKS image.
# $1: device mapper name
# $2: directory to put inside the image
# $3: image path
# $4: image size
# $5: encryption key
# $6: UNIX time (for a datetime-based uuid)
# $7: partition label
# $8: if true, the image will be writable
# $9: if true, the dm-verity layer will be disabled 
#     so that the image can be opened from GRUB
_mkimg_squashfs+luks() {
  local \
    _name="${1}" \
    _dir="${2}" \
    _image_path="${3}" \
    _size="${4}" \
    _encryption_key="${5}" \
    _epoch="${6}" \
    _label="${7}" \
    _writable="${8}" \
    _grub="${9}"
  _mkluks_common \
    "${_name}" \
    "${_encryption_key}" \
    "${_label}"
  _run_mkluks \
    "${_image_path}" \
    "${_size}" \
    "${_encryption_key}" \
    "${_epoch}" \
    "${_label}" \
    "${_writable}" \
    "${_grub}"
  _run_mksquashfs \
    "${_dir}" \
    "${image_device}"
  sync
  _close_luks_device \
    "${image_device}"
}

## SWAP over LUKS (encrypted swap)

# Creates a swap partition inside a LUKS container image file.
# $1: device mapper name
# $2: LUKS image path
# $3: image size
# $4: encryption key
# $5: UNIX time (for a date-based uuid)
# $6: partition label
# $7: if true, dm-verity layer will be disabled to open the image from GRUB
_mkimg_swap+luks() {
  local \
    _name="${1}" \
    _image_path="${2}" \
    _size="${3}" \
    _encryption_key="${4}" \
    _epoch="${5}" \
    _label="${6}" \
    _grub="${7}" \
    _writable="true" \
  _mkluks_common \
    "${_name}" \
    "${_encryption_key}" \
    "${_label}"
  _run_mkluks \
    "${_image_path}" \
    "${_size}" \
    "${_encryption_key}" \
    "${_epoch}" \
    "${_label}" \
    "${_writable}" \
    "${_grub}"
  _run_mkswap \
    "${image_device}" \
    "$(_get_internal_size \
         "${_size}")" \
    "${_epoch}" \
    "${_name}"
  sync
  _close_luks_device \
    "${image_device}"
}

### 3-layered types

## EXT4 over RAID over LUKS (encrypted high-performance/high-availability
#                            image type)

# Creates an ext4-formatted RAID1 on a LUKS images array
# $1: RAID name
# $2: directory to fill the RAID with
# $3: encryption key
# $4: UNIX time (to get a date-based UUID)
# $@: LUKS image paths array
_mkimg_ext4+raid1+luks() {
  local \
    _name="${1}" \
    _dir="${2}" \
    _encryption_key="${3}" \
    _epoch="${4}" \
    _images=() \
    _image
  # local _label="${5}"
  # local _grub="${6}"
  # local _image_path="${3}"
  # local _size="${4}"
  local \
    _writable="true"
  shift \
    4
  _images=(
    "$@"
  )
  _image
  for _image in "${_images[@]}"; do
    echo "${_device}"
      _mkluks_common \
        "${_name}" \
        "${_encryption_key}" \
        "${_label}"
    _run_mkluks "${_image_path}" \
      "${_size}" \
      "${_encryption_key}" \
      "${_epoch}" \
      "${_label}" \
      "${_writable}" \
      "${_grub}"
  done
  for _device \
    in "${_devices[@]}"; do
    _close_luks_device \
      "${image_device}"
  done
}

## EXT4 OVER SQUASHFS OVER LUKS (encrypted compressed
#                                read-only image type) 

# Creates an ext4 image and packs it inside a squashfs image.
# Packs the squash image inside a LUKS image.
# $1: device mapper name
# $2: directory to put inside the image
# $3: image path
# $4: image size
# $5: encryption key
# $6: UNIX time (for a datetime-based uuid)
# $7: partition label
# $8: if true, the image will be writable
# $9: if true, the dm-verity layer will be disabled 
#     so that the image can be opened from GRUB
_mkimg_ext4+squashfs+luks() {
  local \
    _name="${1}" \
    _dir="${2}" \
    _image_path="${3}" \
    _size="${4}" \
    _encryption_key="${5}" \
    _epoch="${6}" \
    _label="${7}" \
    _writable="${8}" \
    _grub="${9}"
  _mkluks_common \
    "${_name}" \
    "${_encryption_key}" \
    "${_label}"
  _run_mkluks \
    "${_image_path}" \
    "${_size}" \
    "${_encryption_key}" \
    "${_epoch}" \
    "${_label}" \
    "${_writable}" \
    "${_grub}"
  _run_mkext4 \
    "${_dir}" \
    "$(_get_internal_size \
         "${_size}")" \
    "${_epoch}" \
    "${_name}" \
    "${_writable}"
  _run_mksquashfs \
    "${_dir}.img" \
    "${image_device}"
  sync
  _close_luks_device \
    "${image_device}"
  rm -- \
    "${_dir}.img"
}

## Image making funtions arguments generation function

# Get opts for a mkimg<fs_type> function
# $1: file system composed type (ie. ext4+squashfs+luks)
_get_mkimg_opts() {
  local \
    fs_type="${1}" \
    _btrfs_opts=() \
    _btrfs_luks_opts=() \
    _erofs_opts=() \
    _erofs_luks_opts=() \
    _ext4_opts=() \
    _ext4_luks_opts=() \
    _ext4_squashfs_luks_opts=() \
    _fat_opts=() \
    _squashfs_opts=() \
    _squashfs_luks_opts=() \
    _swap_opts=() \
    _swap_luks_opts=() \
    _compression
  _dir="${input_directory}"
  _epoch="${img_epoch}"
  _size="${img_size}"
  _label="${img_label}"
  _name="${img_name}"
  _compression="${img_compression}"
  _writable="${img_writable}"
  _btrfs_opts=(
    "${_image_path}"
    "${_dir}"
    "${_epoch}"
    "${_size}"
    "${_label}"
    "${_compression}")
  _erofs_opts=(
    "${_image_path}"
    "${_dir}"
    "${_epoch}")
  _ext4_opts=(
    "${_dir}"
    "${_image_path}"
    "${_size}"
    "${_epoch}"
    "${_label}")
  _fat_opts=(
    "${_image_path}"
    "${_size}"
    "${_label}")
  _squashfs_opts=( 
    "${_dir}"
    "${_image_path}")
  _swap_opts=(
    "${_image_path}"
    "${_size}"
    "${_epoch}"
    "${_label}"
  )
  _btrfs_luks_opts=(
    "${_name}"
    "${_dir}"
    "${_image_path}"
    "${_size}"
    "${encryption_key}"
    "${_epoch}"
    "${_label}"
    "${grub_support}"
    "${img_compression}"
  )
  # shellcheck disable=SC1036
  # shellcheck disable=SC1056
  # shellcheck disable=SC1072
  _erofs_luks_opts=(
    "${_name}"
    "${_dir}"
    "${_image_path}"
    "${size_auto}"
    "${encryption_key}"
    "${_epoch}"
    "${_label}"
    "${grub_support}"
  )
  _ext4_luks_opts=(
    "${_name}"
    "${_image_path}"
    "${_size}"
    "${key_type}"
    "${_epoch}"
    "${_label}"
    "${grub_support}"
    "${_writable}"
    "${_dir}"
    "${encryption_key}"
  )
  _ext4_squashfs_opts=(
    "${_name}"
    "${_dir}"
    "${_image_path}"
    "${_size}"
    "${_epoch}"
    "${_label}"
    "${_writable}")
  _squashfs_luks_opts=(
    "${_name}"
    "${_dir}"
    "${_image_path}"
    "${_size}"
    "${encryption_key}"
    "${_epoch}"
    "${_label}"
    "${_writable}"
    "${grub_support}"
  )
  _swap_luks=(
    "${_name}"
    "${_image_path}"
    "${_size}"
    "${encryption_key}"
    "${_epoch}"
    "${_label}"
    "${grub_support}"
  )
  _ext4_squashfs_luks_opts=(
    "${_name}"
    "${_dir}"
    "${_image_path}"
    "${_size}"
    "${encryption_key}"
    "${_epoch}"
    "${_writable}"
    "${grub_support}"
  )
  _msg_info \
    "options for type '${fs_type}':"
  _mkimg_opts=(
    $(_get \
        "_$( \
          echo \
            "${fs_type}" | \
            sed \
              "s/+/_/g")" \
        "opts")
  )
  _msg_info \
    "${_mkimg_opts[*]}"
}

## File systems type support

# BTRFS
_validate_requirements_image_type_btrfs() {
  _check_cmd \
    "mkfs.btrfs" \
    "btrfs-progs"
}

# EROFS
_validate_requirements_image_type_erofs() {
  _check_cmd \
    "mkfs.erofs" \
    "erofs-utils"
}

# EXT4
_validate_requirements_image_type_ext4() {
  _check_cmd \
    "mkfs.ext4" \
    "e2fsprogs"
  _check_cmd \
    "tune2fs" \
    "e2fsprogs"
}

# FAT
_validate_requirements_image_type_fat() {
  _check_cmd \
    "mkfs.fat" \
    "dosfstools"
  _check_cmd \
    "mmd" \
    "mtools"
}

# LUKS
_validate_requirements_image_type_luks() {
  local \
    _key
  # TODO: Switch to mkluks
  _check_cmd \
    "cryptsetup"
  _check_cmd \
    "mkluks" \
    "luks-tools"
  # TODO: this part is probably inside mkluks
  # _key="$( \
  #   _get \
  #     "encryption" \
  #     "key")"
  # [[ -n "${_key}" ]] && \
  #   _resolve_key_auto \
  #     "key" \
  #     "auto"
}

# SQUASHFS
_validate_requirements_image_type_squashfs() {
  _check_cmd \
    "mksquashfs" \
    "squashfs-tools"
}

## 2-layered image types

# BTRFS over LUKS
_validate_requirements_image_type_btrfs+luks() {
  _validate_requirements_image_type_luks
  _validate_requirements_image_type_btrfs
}


# EROFS over LUKS
_validate_requirements_image_type_erofs+luks() {
  _validate_requirements_image_type_luks
  _validate_requirements_image_type_erofs
}

# EXT4 over LUKS
_validate_requirements_image_type_ext4+luks() {
    _validate_requirements_image_type_luks
    _validate_requirements_image_type_ext4
}


# EXT4 over SQUASHFS
_validate_requirements_image_type_ext4+squashfs() {
  _validate_requirements_image_type_ext4
  _validate_requirements_image_type_squashfs
}

# SQUASHFS over LUKS
_validate_requirements_image_type_squashfs+luks() {
  _validate_requirements_image_type_luks
  _validate_requirements_image_type_squashfs
}

## 3-layered image types

# EXT4 over SQUASHFS over LUKS
_validate_requirements_image_type_ext4+squashfs+luks() {
  _validate_requirements_image_type_luks
  _validate_requirements_image_type_squashfs
  _validate_requirements_image_type_ext4
}



# Produces a file system image
# $1: value in 'fs_images'
_mkimg() {
  local \
    _type="${1}" \
    _validate="${2}" \
    _imgs=() \
    _mkimg_opts=()
  _imgs=(
    "$@"
  )
  rm \
    -f -- \
    "${_imgs[@]}"
  # Raid support will be added when
  # a machine with support for it will be
  # available
  _image_path="${_imgs}"
  _get_mkimg_opts \
    "${_type}"
  "_validate_requirements_image_type_${_type}"
  if [[ "${_validate}" == true ]]; then
    return
  fi
  "_mkimg_${_type}" \
    "${_mkimg_opts[@]}"
}

_get_conf_path() {
  local \
    _dir \
    _conf
  _dir="${HOME}/.config/$( \
    _get \
      "app" \
      "name")"
  _conf="${_dir}/$( \
    _get \
      "img" \
      "tuple").cfg"
  echo \
    "${_conf}"
}

_img_uuid_auto_detect() {
  local \
    _epoch \
    _uuid
  _epoch="$( \
    _get_epoch)"
  _type="$( \
    _get \
      "uuid" \
      "type")"
  if [[ "${_type}" == "epoch" ]]; then
  _get_epoch_fsuuid \
    "${_epoch}"
  elif [[ "${_type}" == "default" ]]; then
    uuidgen
  fi
}

_img_tuple_auto_detect() {
  local \
    _tuple \
    _os
  _tuple="btrfs+luks+raid1"
  _os="$( \
    uname \
      -o)"
  # mdadm is still unbuilt on Android
  if \
    [[ "${_os}" == "Android" ]]; then
    _tuple="ext4+luks"
  fi
  echo \
    "${_tuple}"
}
_set_overrides() {
  _set_override \
    "creation" \
    "date" \
    "$(_get_date_human)"
  _set_override \
    "uuid" \
    "type" \
    "epoch"
  _set_override \
    "img" \
    "uuid" \
    "$(_img_uuid_auto_detect)"
  _set_override \
    "img" \
    "tuple" \
    "$(_img_tuple_auto_detect)"
  _set_override \
    "img" \
    "size" \
    "auto"
  _set_override \
    "img" \
    "name" \
    "image"
  _set_override \
    "img" \
    "label" \
    "label"
  _set_override \
    "img" \
    "writable" \
    "true"
  _set_override \
    "grub" \
    "support" \
    "true"
  _set_override \
    "validate" \
    "only" \
    "false"
  _set_override \
    "key" \
    "type" \
    "auto"
  _set_override \
    "input" \
    "directory" \
    ""
  if [[ -v override_quiet ]]; then
    quiet="${override_quiet}"
  elif [[ -z "${quiet}" ]]; then
    quiet="y"
  fi
  if [[ -v override_color ]]; then
    color="${override_color}"
  elif [[ -z "${color}" ]]; then
    color="n"
  fi
}

# Show help usage, with an exit status.
# $1: exit status number.
_usage() {
  local \
    _usage_text
  IFS='' \
    read \
      -r \
      -d '' \
      _usage_text << \
        ENDUSAGETEXT || true
Produces a volume image
usage:
  $(_get "app" "name")
    [options]
    [<out_file>]
  options:
     -u <uuid>            Image UUID
                          Default: $(_get "img" "uuid")
     -f <img_tuple>       Image format tuple, written as
                          '<container>+...+<container>+<fs>'
                          Default: $(_get "img" "tuple")
     -d <directory>       Specify input directory
     -s <size>            Specify a size fon the image
     -n <img_name>        LUKs container image name (if enabled)
                          Default: $(_get "img" "name")
     -l <img_label>       Image label
                          Default: $(_get "img" "label")
     -K <key_type>        LUKS container encryption key type
                          ('auto', 'passphrase', 'file')
                          Default: $(_get "key" "type")
     -k <encryption_key>  LUKS container encryption key
                          Default: $(_get "encryption" "key")
     -w                   Specify whether the image is intended to be writable
                          Default: $(_get "img" "writable")
     -g                   Specify whether the image is intended to be able
                          to be opened by GRUB
                          Default: $(_get "grub" "support")
     -t                   Only verify if requirements to produce the image
                          are satisfied.
                          Default: $(_get "validate" "only")
     -m                   UUID auto generation type
                          Values are 'default' and 'epoch'
                          Default: '$(_get "uuid" "type")'
     -h                   This message.
     -c                   Enable color output
     -v                   Enable verbose output
  file systems:
     ext4                 Ext4 file system
     erofs                Enhanced read only file system
     btrfs                Better file system
     squashfs             Squash file system
  containers:
     squashfs             Squash can act also as a container
     luks                 LUKS2 (encrypted) filesystem container
     raid0                RAID0 filesystem container
ENDUSAGETEXT
  _printf \
    '%s\n' \
    "${_usage_text}"
  exit \
    "${1}"
}

_display_flags() {
  local \
    _flags=(
      "${1}"
    ) \
    _flag
  for _flag \
    in "${_flags[@]}"; do
  _msg_info \
    "                             ${_flag}"
  done
}

# Shows configuration options.
_show_config() {
  _msg_info "$(_get "app" "name") configuration"
  _msg_info "            Creation date:   $(_get "creation" "date")"
  _msg_info "           Output file(s):   ${out_files[*]}"
  _msg_info "               Image UUID:   $(_get "img" "uuid")"
  _msg_info "                UUID Type:   $(_set "uuid" "type")"
  _msg_info "       Image format tuple:   $(_get "img" "tuple")"
  _msg_info "               Image size:   $(_get "img" "size")"
  _msg_info "              Image label:   $(_get "img" "label")"
  _msg_info "               Image name:   $(_get "img" "name")"
  _msg_info "                 Key type:   $(_get "key" "type")"
  _msg_info "           Encryption key:   $(_get "encryption" "key")"
  _msg_info "                 Writable:   $(_get "img" "writable")"
  _msg_info "             GRUB support:   $(_get "grub" "support")"
  _msg_info "            Validate only:   $(_get "validate" "only")"
  _msg_info "          Input directory:   $(_get "input" "directory")"
}

_globals
_global_variables
_requirements
_config_user_init \
  "$(_get \
       "app" \
       "name")"
# shellcheck disable=SC2034
while \
  getopts \
    'u:f:d:s:n:l:K:k:wtgm:cvh?' \
    arg; do
  case \
    "${arg}" in
    u) override_img_uuid="${OPTARG}" ;;
    f) override_img_tuple="${OPTARG}" ;;
    d) override_input_directory="${OPTARG}" ;;
    s) override_img_size="${OPTARG}" ;;
    n) override_img_name="${OPTARG}" ;;
    l) override_img_label="${OPTARG}" ;;
    K) override_key_type="${OPTARG}" ;;
    k) override_encryption_key="${OPTARG}" ;;
    w) override_img_writable="true" ;;
    w) override_img_writable="true" ;;
    t) override_validate_only="true" ;;
    g) override_grub_support="false" ;;
    m) override_uuid_type="${OPTARG}" ;;
    c) override_color="y" ;;
    v) override_quiet="n" ;;
    h|?) _set_overrides && \
         _usage \
           0 ;;
    *)
    _msg_error \
      "Invalid argument '${arg}'" \
      0
    _usage \
      1
    ;;
  esac
done
shift \
  $(( \
    OPTIND - 1 \
  ))
_set_overrides
(( $# < 1 )) && \
[[ "${validate_only}" == false ]] && \
  _msg_error \
    "no output image(s) specified" \
    0 && \
  _set_overrides && \
  _usage \
    1
out_files=(
  "$@"
)
[[ "$(_get \
        "img" \
        "tuple")" == "" ]] && \
  _msg_error \
    "-f option is required" \
    0 && \
  _usage \
    1
app_opts+=(
  "$(_get \
       "img" \
        "uuid")"
  "$(_get \
       "img" \
        "tuple")"
  "$(_get \
      "validate" \
      "only")"
  "${out_files[@]}"
  )
_show_config
_mkimg \
  "${app_opts[@]}"

# vim:set sw=2 sts=-1 et:
